name: Build check and publish

on: 
  push:
    branches:
      - '**'

jobs:
  build:
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch the entire history
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 21
    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - run: mvn clean package
    
  archive:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch the entire history
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 21
    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - run: mvn clean package
    - run: find . -name "FTSEngine*.jar"
    - uses: actions/upload-artifact@v4
      with:
        name: 'FTSEngine (Master Build)'
        path: ./target/FTSEngine*.jar

  tag_version:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch the entire history
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 21

    - name: Get current version
      id: get_version
      run: |
        current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Current version: $current_version"
        echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV

    - name: Check for previous commit and pom.xml file
      run: |
        if git rev-parse HEAD~1 >/dev/null 2>&1; then
          if git show HEAD~1:pom.xml >/dev/null 2>&1; then
            last_version=$(git show HEAD~1:pom.xml | grep -oPm1 "(?<=<version>)[^<]+")
            echo "Last version: $last_version"
          else
            echo "pom.xml not found in the previous commit."
            last_version=""
          fi
        else
          echo "No previous commit found."
          last_version=""
        fi
        echo "LAST_VERSION=$last_version" >> $GITHUB_ENV

    - name: Create Tag
      if: env.LAST_VERSION != '' && env.CURRENT_VERSION != env.LAST_VERSION
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
      run: |
        echo "Creating tag v${CURRENT_VERSION}"
        git tag "v${CURRENT_VERSION}"
        git push https://${{ secrets.ACTIONS_TOKEN }}@github.com/FTSCraft/FTSEngine.git "v${CURRENT_VERSION}"
