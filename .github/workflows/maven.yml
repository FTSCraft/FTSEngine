name: Build check and publish

on: 
  push:
    branches:
      - '**'

jobs:
  build:
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 21
    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - run: mvn clean package
    
  archive:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 21
    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - run: mvn clean package
    - run: find . -name "FTSEngine*.jar"
    - uses: actions/upload-artifact@v4
      with:
        name: 'FTSEngine (Master Build)'
        path: ./target/FTSEngine*.jar

  tag_version:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 21

    - name: Get current version
      id: get_version
      run: |
        current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Current version: $current_version"
        echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV

    - name: Check for version changes
      id: check_version
      run: |
        last_version=$(git show HEAD~1:pom.xml | grep -oPm1 "(?<=<version>)[^<]+")
        echo "Last version: $last_version"
        echo "LAST_VERSION=$last_version" >> $GITHUB_ENV

        if [[ "$CURRENT_VERSION" != "$LAST_VERSION" ]]; then
          echo "Version changed: creating tag"
          echo "TAG_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        else
          echo "No version change detected."
          echo "TAG_VERSION=" >> $GITHUB_ENV

    - name: Create Tag
      if: env.TAG_VERSION != ''
      run: |
        echo "Creating tag v${TAG_VERSION}"
        git tag "v${TAG_VERSION}"
        git push origin "v${TAG_VERSION}"
